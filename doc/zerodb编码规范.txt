1、函数的开始、结构的定义及循环、判断、case等语句中的代码都要采用缩进风格,缩进的空格数为4个。
2、在每个函数定义结束之后都要加空行。
3、一行只能写一条语句，一行程序以小于80字符为宜。
4、if、for、do、while、case、switch、default等语句自占一行，且if、for、do、while等语句的执行语句部分无论多少都要加括号｛｝。程序块的分界符自占一行。
5、逗号、分号只在后面加空格；比较操作符，赋值操作符“＝”、“＋＝”，算数操作符“＋”、“％”，逻辑操作符“&&”、
“&”，位域操作符“<<”，“^”等双目操作符的前后都应加空格；“!”、“~”、“++”、“‐‐ ”、"&"(地址运算符)等单目操作符前后不加空格。
6、.c 文件中，组织顺序为公用头文件，自用头文件，宏，结构联合（放在头文件中），变量，函数原型，函数实现的顺序进行排版，函数的组织顺序应按照先主函数再子函数。
7、头文件的组织顺序应该按照以下顺序：  
#ifndef    _路径名_路径子名_..._ 文件名_H_   
#define  _路径名_路径子名_..._ 文件名_H_   
#include   文件引用 
宏定义
类型定义
常量定义sem321.com
结构体定义
函数原型定义
#endif    ///  <要求必须在此注释出此“  #endif ”对应于哪个“#ifdef”>
8、源程序有效注释量必须在30％以上。
9、源文件头部应进行注释，列出：模块名、文件名、相关文件、实现功能、作者、修改记录等。
10、函数头部应进行注释，列出：函数名、功能、输入参数、输出参数、返回值等。 
11、变量、函数只能由26个小写字母，10个数字以及下划线组成。标识符的命名要清晰、明了，有明确含义，同时尽量使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。
12、typedef struct _name_t //结构体命名
    { 
         
    }name_t, *name_p;
13、函数名的命名采用宾动格式。
14、对于变量命名，禁止取单个字符（如  i、j 、k...），建议除了要有具体含义外，还能表明其变量类型、数据类型等，但  i、j 、k 作局部循环变量是允许的。
15、不同类型的操作符混合使用时，使用括号给出优先级。
16、源程序中关系较为紧密的代码应尽可能相邻，禁止使用难懂的技巧性很高的语句。
17、当一个函数中对较长变量（一般是结构的成员）有较多引用时，建议用一个意义相当的宏代替。 
18、使用严格形式定义的、可移植的数据类型，例如int32_t。
19、少用宏；用宏定义表达式时，要使用完备的括号；使用宏时，不允许参数发生变化。
20、函数的规模尽量限制在100 行以内。
21、函数中申请的局部资源（如：文件句柄、socket等），在同一函数中退出之前必须释放。
22、编程时，防止差1错误。 
23、明确规定对接口函数参数的合法性、有效性检查应由函数的提供者负责。
24、if 语句尽量加上else 分支；switch‐case语句中，default不能忽略，其后要加入异常处理；switch 语句的每个分支里的语句数一般应少于20行，以提高程序的可读性，否则考虑采用函数调用。
25、循环体内工作量最小化。
26、在声明指针后，必须将指针赋值为 NULL，防止产生无效判断。在分配指针内存后，必须将内存清空。
27、函数中分配的内存，在函数退出之前要释放，释放后，必须将指针设为NULL，防止产生野指针。
28、定义指针类型的数据，应将*放在变量前。 
29、函数不要使用带有二义性的返回值；对于函数返回值不是基本类型的则采用指针返回。
30、枚举值按照从小到大顺序定义。 
31、禁止使用复杂的操作符组合。
32、用sizeof 来确定结构、联合或变量占用的空间。
33、避免相同的代码段在多个地方出现。